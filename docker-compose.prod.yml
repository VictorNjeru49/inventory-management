version: '3.8'  

services:  
  InventoryManagement:
    image: postgres:15-alpine
    container_name: InventoryManagement-prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-LxfwP7haEW0K}
      POSTGRES_DB: ${DB_NAME:-InventoryManagement}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    networks:
      - app-network
    volumes: 
      - pgdata_prod:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_ NAME:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:8.0-alpine
    container_name: redis-cache-prod
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-your_secure_redis_password}
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD:-your_secure_redis_password}"]
    ports:
      - "6379:6379"
    volumes:
      - redis-data_prod:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-your_secure_redis_password}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  nestjs-app-prod:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: nestjs-app-prod
    restart: unless-stopped
    ports:
      - "80:8000"
    environment:
      NODE_ENV: production
      PORT: 8000
      DB_HOST: InventoryManagement
      NEON_DATABASE_URL: ${NEON_DATABASE_URL:-postgresql://restuarantdb_owner:LxfwP7haEW0K@ep-weathered-frost-a5oh2con-pooler.us-east-2.aws.neon.tech/InventoryManagement?sslmode=require}
      DB_SYNC: ${DB_SYNC:-false}
      DB_LOGGING:  ${DB_LOGGING:-false}
      REDIS_URL: redis://:${REDIS_PASSWORD:-password}@${REDIS_HOST:-redis}:${REDIS_PORT:-6379}
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET:-your_access_token}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET:-your_refresh_token}
      ACCESS_TOKEN_EXPIRES_IN: ${ACCESS_TOKEN_EXPIRES_IN:-15m}
      REFRESH_TOKEN_EXPIRES_IN: ${REFRESH_TOKEN_EXPIRES_IN:-7d}
      RESET_TOKEN_SECRET: ${RESET_TOKEN_SECRET:-your_reset_token_secret}
      RESET_TOKEN_EXPIRES_IN: ${RESET_TOKEN_EXPIRES_IN:-1h}
      SMTP_USER: ${SMTP_USER:-victornjeru49@gmail.com}
      SMTP_PASS: ${SMTP_PASS:-stno mlwg xtcz wfgq}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      THROTTLE_TTL: ${THROTTLE_TTL:-90000}
      THROTTLE_LIMIT: ${THROTTLE_LIMIT:-100}
    depends_on:
      redis:
        condition: service_healthy
      InventoryManagement:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  pgdata_prod:
    name: inventory-app-pgdata-prod
    driver: local
  redis-data_prod:
    name: inventory-redis-data-prod
    driver: local
  app_logs_prod:
    name: inventory-app-logs-prod
    driver: local

networks: 
  app-network:
    driver: bridge
